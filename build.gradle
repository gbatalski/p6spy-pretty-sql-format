['java', 'signing', 'maven-publish', 'idea'].each {
    apply plugin: it
}

group = 'de.batalski'
version = '1.0.0'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile "p6spy:p6spy:2.0.0"
    compile "org.hibernate:hibernate-core:4.3.11.Final"
    testCompile "org.junit.jupiter:junit-jupiter-api:5.0.0-M3"

}

repositories {
    mavenCentral()
}

// javadoc.jar generation
task javadocJar(type: Jar, dependsOn: javadoc) { // (1)
    classifier = 'javadoc'
    from javadoc.destinationDir
}
// sources.jar generation
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
// pom file name
ext {
    pomFilePath = "${project.projectDir}/tmp/pom.xml"
    pomFile = file(pomFilePath)
}
// add configuration for pom signing
configurations {
    pom
}
// summarize artifacts
artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    if (pomFile.exists()) {
        pom pomFile
    }
}
// sign all artifacts
task signJars(type: Sign, dependsOn: [jar, javadocJar, sourceJar]) {
    sign configurations.archives
}
// sign pom
task signPom(type: Sign) {
    sign configurations.pom
}
// defining which tasks should be called
if (project.ext.pomFile.exists()) {
    task preparePublication(dependsOn: [signJars, signPom])
} else {
    task preparePublication(dependsOn: signJars)
}
// extract signatures and add classifier and extension to them
def getSignatureFiles = {
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [
            [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
            [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
            [archive: signedJar, classifier: null, extension: 'jar.asc']
    ]
}
// extract pom signature
def getPomSignature = {
    return project.tasks.signPom.signatureFiles.collect { it }[0]
}

publishing {
    publications {
        gpgJars(MavenPublication) {
            getSignatureFiles().each { signature ->
                artifact(signature.archive) {
                    classifier = signature.classifier
                    extension = signature.extension
                }
            }
        }
        if (project.ext.pomFile.exists()) {
            gpgPom(MavenPublication) {
                artifact(getPomSignature()) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }
        }
        jar(MavenPublication) {
            from components.java

            pom.withXml {
                asNode().children().last() + {

                    resolveStrategy = Closure.DELEGATE_FIRST
                    name project.group + ':' + project.name
                    description 'Pretty SQL formatter from Hibernate integrated with P6Spy'
                    url 'https://github.com/gbatalski/p6spy-pretty-sql-format'

                    scm {
                        url 'http://github.com/gbatalski/p6spy-pretty-sql-format/tree/master'
                        connection 'scm:git:git://github.com/gbatalski/p6spy-pretty-sql-format/.git'
                        developerConnection 'scm:git:ssh://github.com:gbatalski/p6spy-pretty-sql-format.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'gbatalski'
                            name 'Ghenadii Batalski'
                            email 'ghenadii.batalski AT gmail.com'
                        }
                    }
                }
                // add required elements
                // here writing pom file
                if (!project.ext.pomFile.exists()) {
                    writeTo (project.ext.pomFile)
                }

            }
        }
    }
}